version: '3'
services:
  frontend:
    platform: linux/arm64
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 3000 of the container to port 8080 on the host
      - "8080:3000"
    volumes:
      # Mount the frontend directory to the /app directory in the container
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0

  orchestrator:
    platform: linux/arm64
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
  
  fraud_detection:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      - 50051:50051
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./fraud_detection/src:/app/fraud_detection/src

  transaction_verification:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      - 50052:50052
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./transaction_verification/src:/app/transaction_verification/src

  suggestions:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./suggestions/Dockerfile
    ports:
      - 50053:50053
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/suggestions/src/app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
    volumes:
      - ./utils:/app/utils
      - ./suggestions/src:/app/suggestions/src

  book_suggestion_model:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./book_suggestion_model/Dockerfile
    ports:
      - 50054:50054
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/book_suggestion_model/src/app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
    volumes:
      - ./utils:/app/utils
      - ./book_suggestion_model/src:/app/book_suggestion_model/src

  # ---- order processing ----
  order_queue:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./order_queue/Dockerfile
    ports:
      - 50055:50055
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_queue/src/app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
    volumes:
      - ./utils:/app/utils
      - ./order_queue/src:/app/order_queue/src


  # order_executor_1:
  #   platform: linux/arm64
  #   build:
  #     context: ./
  #     dockerfile: ./order_executor/Dockerfile
  #   depends_on:
  #     - redis
  #   ports:
  #     - "50056:50056"
  #   environment:
  #     - PYTHONUNBUFFERED=TRUE
  #     - PYTHONFILE=/app/order_executor/src/app.py
  #     - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
  #     - SERVICE_ID=executor_1
  #   volumes:
  #     - ./utils:/app/utils
  #     - ./order_executor/src:/app/order_executor/src

  # order_executor_2:
  #   platform: linux/arm64
  #   build:
  #     context: ./
  #     dockerfile: ./order_executor/Dockerfile
  #   depends_on:
  #     - redis
  #   ports:
  #     - "50057:50056"
  #   environment:
  #     - PYTHONUNBUFFERED=TRUE
  #     - PYTHONFILE=/app/order_executor/src/app.py
  #     - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
  #     - SERVICE_ID=executor_2
  #   volumes:
  #     - ./utils:/app/utils
  #     - ./order_executor/src:/app/order_executor/src



  # order_executor:
  #   platform: linux/arm64
  #   build:
  #     context: ./
  #     dockerfile: ./order_executor/Dockerfile
  #   ports:
  #     - "50056"
  #   deploy:
  #     replicas: 2
  #   depends_on:
  #     - redis
  #   environment:
  #     - PYTHONUNBUFFERED=TRUE
  #     - PYTHONFILE=/app/order_executor/src/app.py
  #     - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
  #     - SERVICE_ID=executor_{HOSTNAME}
  #   volumes:
  #     - ./utils:/app/utils
  #     - ./order_executor/src:/app/order_executor/src
  #   networks:
  #     - app_network


  order_executor_1:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50056:50056"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVICE_ID=order_executor_1
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src

  order_executor_2:
    platform: linux/arm64
    build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
    ports:
      - "50057:50056"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_executor/src/app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/bookstore
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SERVICE_ID=order_executor_2
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src



  # ---- databases ----
  # https://gist.github.com/gbzarelli/c15b607d62fc98ae436564bf8129ea8e
  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_DATABASE: bookstore
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init_scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"

  # mongodb_users:
  #   container_name: mongodb_users
  #   image: mongo:latest
  #   restart: always
  #   environment:
  #     MONGO_INITDB_DATABASE: users
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: password
  #   volumes:
  #     - mongodb_users_data:/data/db
  #   ports:
  #     - "27018:27017"

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - "8099:8081"
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: admin
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: password
  #     # ME_CONFIG_MONGODB_SERVER: mongodb
  #     ME_CONFIG_MONGODB_PORT: 27017
  #   depends_on:
  #     - mongo
  #   links:
  #     - mongo


  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    # networks:
    #   - app_network
    
    
volumes:
  mongodb_data:
  mongodb_users_data:


networks:
  app_network:
    driver: bridge